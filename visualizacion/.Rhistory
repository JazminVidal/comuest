df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
df_frutas %>% distinct(pais_destino)
# Se filtra los datos
df_frutas_filt = df_frutas %>%  filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_filt$totales_usd = round(df_frutas_filt$totales_usd,0)
df_frutas_filt
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_filt %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
knitr::opts_chunk$set(echo = TRUE)
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(tidyverse)
library(tidyverse)
df_frutas = read.csv('datos/exportaciones-de-frutas-del-anio-2013-al-2017.csv')
df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
df_frutas %>% distinct(pais_destino)
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(tidyverse)
library(showtext)
showtext_auto()
df_frutas = read.csv('datos/exportaciones-de-frutas-del-anio-2013-al-2017.csv')
df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
df_frutas %>% distinct(pais_destino)
library(tidyverse)
library(showtext)
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
# Medidas de resumen de la variable totales_usd
# que informa sobre el total en dólares de exportación por año y por fruta
summary(df_frutas$totales_tn)
# Medidas de resumen de la variable totales_ton
# que informa sobre el total en toneladas exportadas por año y por fruta
summary(df_frutas$totales_usd)
# Medidas de resumen de la variable totales_ton
# que informa sobre el total en toneladas exportadas por año y por fruta
summary(df_frutas$totales_usd)
# Lista de frutas exportadas sin repeticiones
df_frutas %>% distinct(producto)
# Se filtra los datos
df_frutas_filt = df_frutas %>%  filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_filt$totales_usd = round(df_frutas_filt$totales_usd,0)
df_frutas_filt
# Lista de países importadores sin repeticiones
#df_frutas %>%  distinct(pais_destino)
# Lista de frutas exportadas sin repeticiones
#df_frutas %>% distinct(producto)
# Medidas de resumen de la variable totales_usd
# que informa sobre el total en dólares de exportación por año y por fruta
summary(df_frutas$totales_tn)
# Medidas de resumen de la variable totales_ton
# que informa sobre el total en toneladas exportadas por año y por fruta
summary(df_frutas$totales_usd)
# Se filtra los datos
df_frutas_filt = df_frutas %>%  filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_filt$totales_usd = round(df_frutas_filt$totales_usd,0)
df_frutas_filt
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_filt %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 =
df_frutas_filt %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
# Se filtra los datos
df_frutas_fil = df_frutas %>%  filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_fil$totales_usd = round(df_frutas_fil$totales_usd,0)
df_frutas_fil
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
# Se filtra los datos
df_frutas_fil = df_frutas %>%  dplyr::filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_fil$totales_usd = round(df_frutas_fil$totales_usd,0)
df_frutas_fil
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
knitr::opts_chunk$set(echo = TRUE)
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(showtext)
df_frutas = read.csv('datos/exportaciones-de-frutas-del-anio-2013-al-2017.csv')
df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
#df_frutas %>%  distinct(pais_destino)
# Lista de frutas exportadas sin repeticiones
#df_frutas %>% distinct(producto)
# Medidas de resumen de la variable totales_usd
# que informa sobre el total en dólares de exportación por año y por fruta
summary(df_frutas$totales_tn)
# Medidas de resumen de la variable totales_ton
# que informa sobre el total en toneladas exportadas por año y por fruta
summary(df_frutas$totales_usd)
# Se filtra los datos
df_frutas_fil = df_frutas %>%  dplyr::filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_fil$totales_usd = round(df_frutas_fil$totales_usd,0)
df_frutas_fil
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
# Se filtra los datos
df_frutas_fil = df_frutas %>%  filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_fil$totales_usd = round(df_frutas_fil$totales_usd,0)
df_frutas_fil
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
knitr::opts_chunk$set(echo = TRUE)
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(showtext)
df_frutas = read.csv('datos/exportaciones-de-frutas-del-anio-2013-al-2017.csv')
df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
knitr::opts_chunk$set(echo = TRUE)
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(showtext)
df_frutas = read.csv('datos/exportaciones-de-frutas-del-anio-2013-al-2017.csv')
df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
# Lista de países importadores sin repeticiones
df_frutas %>%  dplyr::distinct(pais_destino)
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
# Se filtra los datos
df_frutas_fil = df_frutas %>%  filter(totales_tn>3000)
# Se redondea el valor en toneladas.
df_frutas_fil$totales_usd = round(df_frutas_fil$totales_usd,0)
df_frutas_fil
df_frutas_fil
df1
# Se agrupa por año y por producto y se realiza la suma de los dólares por fruta
df1 = df_frutas_fil %>% group_by(año, producto) %>% summarise(tot_dolar = sum(totales_usd))
knitr::opts_chunk$set(echo = TRUE)
# Importamos las librerías a utilizar
#install.packages("remotes")
#remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)
library(ggplot2)
library(dplyr)
library(scales)
library(cowplot)
library(showtext)
df_frutas = read.csv('datos/exportaciones-de-frutas-del-anio-2013-al-2017.csv')
df_frutas = na.omit(df_frutas)
df_frutas
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
# Lista de países importadores sin repeticiones
df_frutas %>%  distinct(pais_destino)
f_est1 <- function(q){2*mean(q)}
f_est2 <- function(q){max(q)}
ECME <- function(Nrep, unif_v, f){
mean((replicate(Nrep, f(unif_v))-3)^2)}
unif_vals <- function(cant){runif(cant, 0, 3)}
Nrep <- 10000
vals_30 <- unif_vals(30)
ECME_est1_30 <- ECME(Nrep, vals_30, f_est1)
ECME_est1_30
ECME_est2_30 <- ECME(Nrep, vals_30, f_est2)
ECME_est2_30
round(ECME_est2_30, 4)
f_est1 <- function(q){2*mean(q)}
f_est2 <- function(q){max(q)}
ECME <- function(Nrep, unif_v, f){
mean((replicate(Nrep, f(unif_v))-3)^2)}
unif_vals <- function(cant){runif(cant, 0, 3)}
Nrep <- 10000
vals_30 <- unif_vals(30)
ECME_est1_30 <- ECME(Nrep, vals_30, f_est1)
ECME_est1_30
ECME_est2_30 <- ECME(Nrep, vals_30, f_est2)
round(ECME_est2_30, 4)
f_est1 <- function(q){2*mean(q)}
f_est2 <- function(q){max(q)}
ECME <- function(Nrep, unif_v, f){
mean((replicate(Nrep, f(unif_v))-3)^2)}
unif_vals <- function(cant){runif(cant, 0, 3)}
Nrep <- 10000
vals_30 <- unif_vals(30)
ECME_est1_30 <- ECME(Nrep, vals_30, f_est1)
ECME_est1_30
ECME_est2_30 <- ECME(Nrep, vals_30, f_est2)
round(ECME_est2_30, 4)
f_est1 <- function(q){2*mean(q)}
f_est1 <- function(q){2*mean(q)}
f_est1 <- function(q){2*mean(q)}
f_est1 <- function(q){2*mean(q)}
f_est2 <- function(q){max(q)}
ECME <- function(Nrep, unif_v, f){
mean((replicate(Nrep, f(unif_v))-3)^2)}
unif_vals <- function(cant){runif(cant, 0, 3)}
set.seed(832)
Nrep <- 10000
vals_30 <- unif_vals(30)
ECME_est1_30 <- ECME(Nrep, vals_30, f_est1)
ECME_est1_30
ECME_est2_30 <- ECME(Nrep, vals_30, f_est2)
round(ECME_est2_30, 4)
vals_30 <- unif_vals(30)
mean((replicate(10000, est_1(vals_30))-3)^2)
vals_30 <- unif_vals(30)
mean((replicate(10000, f_est1(vals_30))-3)^2)
vals_30
vals_30 <- unif_vals(5)
vals_30
mean((replicate(10000, f_est1(vals_30))-3)^2)
mean((replicate(10000, f_est1(runif(n = nmues, min = 0, max =
3)))-3)^2)
vals_30 <- unif_vals(5)
f_est1 <- function(q){2*mean(q)}
f_est2 <- function(q){max(q)}
ECME <- function(Nrep, unif_v, f){
mean((replicate(Nrep, f(unif_v))-3)^2)}
unif_vals <- function(cant){runif(cant, 0, 3)}
vals_30 <- unif_vals(30)
vals_30
mean((replicate(10000, f_est1(vals_30))-3)^2)
mean((replicate(10000, f_est1(runif(30, 0, 3)))-3)^2)
# JV: por estética, unifiquen flechas e iguales. Pongan nombres declarativos. Lean 'The zen of Python', aplica para R.
est1 <- function(a) {
estimador=2*mean(a)
}
est2 <- function(a) {
estimador2=max(a)
}
primera_muestra=c(1.17,1.75, 0.28, 2.56, 2.36, 0.36, 1.82, 0.24, 1.17, 1.86)
est1_primera=est1(primera_muestra)
est2_primera=est2(primera_muestra)
est1_primera
est2_primera
est2_primera
segunda_muestra=c(0.66, 0.07, 0.62, 0.65, 1.33, 0.40, 1.17, 1.11, 2.01, 2.98)
est1_segunda=est1(segunda_muestra)
est2_segunda=est2(segunda_muestra)
est1_segunda
est2_segunda
Variables_5=replicate(1000,est1(runif(5,0,3)))
hist(Variables_5,probability = TRUE, main="est1, 5 muestras",xlim=c(0,6),col="darkslateblue")
Variables_30=replicate(1000,est1(runif(30,0,3)))
hist(Variables_30,probability = TRUE, main="est1, 30 muestras",xlim=c(0,6),col="darkslateblue")
Variables_50=replicate(1000,est1(runif(50,0,3)))
hist(Variables_50,probability = TRUE, main="est1, 100 muestras",xlim=c(0,6),col="darkslateblue")
Variables_5=replicate(1000,est1(runif(5,0,3)))
Variables_30=replicate(1000,est1(runif(30,0,3)))
Variables_50=replicate(1000,est1(runif(50,0,3)))
par(mfrow = c(3,1))
hist(Variables_5,probability = TRUE, main="est1, 5 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_30,probability = TRUE, main="est1, 30 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_50,probability = TRUE, main="est1, 100 muestras",xlim=c(0,6),col="darkslateblue")
# Ojo, se pedía Nrep=10000 no 1000
# No empiecen las variables con mayusculas.
# https://en.wikipedia.org/wiki/Naming_convention_(programming)
Variables_5=replicate(1000,est1(runif(5,0,3)))
Variables_30=replicate(1000,est1(runif(30,0,3)))
Variables_50=replicate(1000,est1(runif(50,0,3)))
par(mfrow = c(3,1))
hist(Variables_5,probability = TRUE, main="est1, 5 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_30,probability = TRUE, main="est1, 30 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_50,probability = TRUE, main="est1, 100 muestras",xlim=c(0,6),col="darkslateblue")
Variables_5_est2=replicate(1000,est2(runif(5,0,3)))
Variables_30_est2=replicate(1000,est2(runif(30,0,3)))
Variables_50_est2=replicate(1000,est2(runif(50,0,3)))
par(mfrow = c(3,1))
hist(Variables_5_est2,probability = TRUE, main="est2, 5 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_30_est2,probability = TRUE, main="est2, 30 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_50_est2,probability = TRUE, main="est2, 100 muestras",xlim=c(0,6),col="darkslateblue")
par(mfrow=c(2,3))
hist(Variables_5,probability = TRUE, main="est1, 5 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_30,probability = TRUE, main="est1, 30 muestras",xlim=c(0,6),col="darkslateblue")
hist(Variables_50,probability = TRUE, main="est1, 100 muestras",xlim=c(0,6),col="darkslateblue")
############################################################################
hist(Variables_5_est2,probability = TRUE, main="est2, 5 muestras",xlim=c(0,6),col="darkorchid3")
hist(Variables_30_est2,probability = TRUE, main="est2, 30 muestras",xlim=c(0,6),col="darkorchid3")
hist(Variables_50_est2,probability = TRUE, main="est2, 100 muestras",xlim=c(0,6),col="darkorchid3")
est1 <- function(a) {
estimador=2*mean(a)
}
est2 <- function(a) {
estimador2=max(a)
}
Nrep=10000
vector_mean=replicate(Nrep,(est1(runif(30,0,3))-3)^2)
ecme_2_mean=mean(vector_mean)
ecme_2_mean
vector_max=replicate(Nrep,(est2(runif(30,0,3))-3)^2)
ecme_max=mean(vector_max)
ecme_max
vector_mean_50=replicate(Nrep,(est1(runif(50,0,3))-3)^2)
ecme_2_mean_50=mean(vector_mean_50)
ecme_2_mean_50
vector_max_50=replicate(Nrep,(est2(runif(50,0,3))-3)^2)
ecme_max_50=mean(vector_max_50)
ecme_max_50
##############################################################################
vector_mean_100=replicate(Nrep,(est1(runif(100,0,3))-3)^2)
ecme_2_mean_100=mean(vector_mean_100)
ecme_2_mean_100
vector_max_100=replicate(Nrep,(est2(runif(100,0,3))-3)^2)
ecme_max_100=mean(vector_max_100)
ecme_max_100
##############################################################################
tabla=data.frame(estimador_mean=c(ecme_2_mean,               ecme_2_mean_50,ecme_2_mean_100),
estimador_max=c(ecme_max,ecme_max_50,ecme_max_100))
row.names(tabla)=c(30,50,100)
tabla
ecme_mean=numeric(46)
ecme_max=numeric(46)
for(i in 5:50){
ecme_mean[i-4]=mean(replicate(Nrep,(est1(runif(i,0,3))-3)^2))
ecme_max[i-4]=mean(replicate(Nrep,(est2(runif(i,0,3))-3)^2))
}
plot(ecme_max,col="navyblue", main="ECME MAX VS ECME MEAN",xlab="numero de muestras")
points(ecme_mean, col="red")
est1 <- function(ts){
2*mean(ts)
}
est2 <- function(ts){
max(ts)
}
datos1<- c(1.17,1.75 ,0.28, 2.56 ,2.36 ,0.36, 1.82, 0.24 ,1.17, 1.86)
est1(datos1)
est2(datos1)
datos2 <- c(0.66, 0.07, 0.62, 0.65, 1.33, 0.40, 1.17 ,1.11, 2.01, 2.98)
est1(datos2)
est2(datos2)
#a
nrep= 1000
promedios_est1_5 <- replicate(nrep, est1(runif(5,0, 3)))
promedios_est1_30 <- replicate(nrep, est1(runif(30,0, 3)))
promedios_est1_100 <- replicate(nrep, est1(runif(100,0, 3)))
par(mfrow = c(3,1))
hist(promedios_est1_5,probability = TRUE,col="yellow",main="")
hist(promedios_est1_30,probability = TRUE,col="orange",main="")
hist( promedios_est1_100,probability = TRUE,col="red", main="")
par(mfrow = c(1,1))
promedios_est2_5 <- replicate(nrep, est2(runif(5,0, 3)))
promedios_est2_30 <- replicate(nrep, est2(runif(30,0, 3)))
promedios_est2_100 <- replicate(nrep, est2(runif(100,0, 3)))
par(mfrow = c(3,1))
hist(promedios_est2_5,probability = TRUE,col="yellow",main="n = 5")
hist(promedios_est2_30,probability = TRUE,col="orange",main="n = 30")
hist( promedios_est2_100,probability = TRUE,col="red", main="n = 100")
par(mfrow = c(1,1))
est1 <- function(ts){
2*mean(ts)
}
est2 <- function(ts){
max(ts)
}
# Están sampleando muchas muestras. En ningún momento hacen promedios de estimaciones. Lo que es un promedio es el primer estimador. Ojo con eso.
# Es confuso el nombre que eligieron y lo que dicen que están haciendo.
Nrep=10000
promedios_unif_est1_30 <- replicate(Nrep, est1(runif(30, 0, 3)))
promedios_unif_est2_30 <- replicate(Nrep, est2(runif(30, 0, 3)))
for(x in 1:Nrep){
promedios_unif_est1_30[x] = (promedios_unif_est1_30[x]-3)**2
promedios_unif_est2_30[x] = (promedios_unif_est2_30[x]-3)**2
}
ECME_est1_30 = 1/Nrep * sum(promedios_unif_est1_30)
ECME_est2_30 = 1/Nrep * sum(promedios_unif_est2_30)
# con n = 50
promedios_unif_est1_50 <- replicate(Nrep, est1(runif(50, 0, 3)))
promedios_unif_est2_50 <- replicate(Nrep, est2(runif(50, 0, 3)))
for(x in 1:Nrep){
promedios_unif_est1_50[x] = (promedios_unif_est1_50[x]-3)**2
promedios_unif_est2_50[x] = (promedios_unif_est2_50[x]-3)**2
}
ECME_est1_50 = mean(promedios_unif_est1_50)
ECME_est2_50 = mean(promedios_unif_est2_50)
#con n=100
promedios_unif_est1_100 <- replicate(Nrep, est1(runif(100, 0, 3)))
promedios_unif_est2_100 <- replicate(Nrep, est2(runif(100, 0, 3)))
for(x in 1:Nrep){
promedios_unif_est1_100[x] = (promedios_unif_est1_100[x]-3)**2
promedios_unif_est2_100[x] = (promedios_unif_est2_100[x]-3)**2
}
ECME_est1_100 = mean(promedios_unif_est1_100)
ECME_est2_100 = mean(promedios_unif_est2_100)
data= matrix(c(ECME_est1_30 , ECME_est2_30 , ECME_est1_50 , ECME_est2_50 , ECME_est1_100 , ECME_est2_100), ncol=2, byrow=TRUE)
colnames(data) = c('est1','est2')
rownames(data) <- c('n=30','n=50','n=100')
final=as.table(data)
final
ECME_est1_n <- vector()
ECME_est2_n <- vector()
for(x in 5:50){
promedios_unif_est1_n <- replicate(Nrep, est1(runif(x, 0, 3)))
promedios_unif_est2_n <- replicate(Nrep, est2(runif(x, 0, 3)))
for(z in 1:Nrep){
promedios_unif_est1_n[z] = (promedios_unif_est1_n[z]-3)**2
promedios_unif_est2_n[z] = (promedios_unif_est2_n[z]-3)**2
}
ECME_est1_n[(x-4)] <- mean(promedios_unif_est1_n)
ECME_est2_n[(x-4)] <- mean(promedios_unif_est2_n)
}
y <- c(5:50)
plot(ECME_est1_n, y, main="Gráfico de dispersión",
xlab="ECME", ylab="N", pch=20, col = "blue")
points(ECME_est2_n, y, main="Gráfico de dispersión",
xlab="ECME", ylab="N", pch=20, col = "red")
knitr::opts_chunk$set(echo = TRUE)
datos <- read.table('datos_DNI_33403185.txt')
datos
datosA <- datos[datos$version == "A", ]
datosB <- datos[datos$version == "B", ]
c(mean(datosA$tiempo), mean(datosB$tiempo))
datos <- read.table('datos_DNI_33.txt')
datos
datosA <- datos[datos$version == "A", ]
datosB <- datos[datos$version == "B", ]
c(mean(datosA$tiempo), mean(datosB$tiempo))
summary(datosA$tiempo)
summary(datosB$tiempo)
boxplot(datos$tiempo ~ datos$version)
# Datos
tiemposA <- datosA$tiempo
tiemposB <- datosB$tiempo
# Alfa, nivel, percentil de la normal y n
nivel <- 0.95
alfa <- 1-nivel
q <- qnorm(1-alfa/2)
n1 <- length(tiemposA)
n2 <- length(tiemposB)
# Estimaciones
media1 <- mean(tiemposA)
media2 <- mean(tiemposB)
# SE
se <- sqrt(var(tiemposA) / n1 + var(tiemposB) / n2)
# Extremos del intervalo
a <- (media1 - media2) - q * se
b <- (media1 - media2) + q * se
c(a, b)
# Datos
tiemposA <- datosA$tiempo
tiemposB <- datosB$tiempo
# Alfa, nivel, percentil de la normal y n
nivel <- 0.99
alfa <- 1-nivel
q <- qnorm(1-alfa/2)
n1 <- length(tiemposA)
n2 <- length(tiemposB)
# Estimaciones
media1 <- mean(tiemposA)
media2 <- mean(tiemposB)
# SE
se <- sqrt(var(tiemposA) / n1 + var(tiemposB) / n2)
# Extremos del intervalo
a <- (media1 - media2) - q * se
b <- (media1 - media2) + q * se
c(a, b)
